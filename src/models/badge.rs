/*
 * @solvedac/unofficial-documentation
 *
 * 이 프로젝트는 [solved.ac](https://solved.ac/) API를 문서화하는 커뮤니티 프로젝트입니다.  이 저장소는 원작자의 요청에 따라 언제든 지워질 수 있으며, 현재 API와 일치하지 않을 수도 있는 점 양해 부탁드립니다.   <sup>   solved.ac 서비스는 shiftpsh가 기획·개발·디자인·운영하는 프로젝트로,   이 저장소와는 solved.ac의 API를 문서화해둔 것 이외에는 아무런 관련이 없습니다. </sup>   [GitHub에서 보기](https://github.com/solvedac/unofficial-documentation)   **주의**: (2023/03/08~) CORS 문제로 인해 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오. ([#51](https://github.com/solvedac/unofficial-documentation/issues/51)) <br> **참고**: 본 저장소를 내려받고, `pnpm dev`를 실행하시면 로컬 개발 서버를 프록시로 삼아 CORS를 무시할 수 있습니다.    ![@solvedac/unofficial-documentation banner](./assets/solvedac-ud-compact.png)
 *
 * The version of the OpenAPI document: 3.2024.03+b1
 * Contact: me@ranolp.dev
 * Generated by: https://openapi-generator.tech
 */

/// Badge : 사용자가 획득할 수 있는 뱃지입니다.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Badge {
    /// 뱃지의 고유 ID입니다.
    #[serde(rename = "badgeId")]
    pub badge_id: String,
    /// 뱃지 사진으로 가는 하이퍼링크입니다.
    #[serde(rename = "badgeImageUrl")]
    pub badge_image_url: String,
    /// 뱃지가 표시되는 이름입니다.
    #[serde(rename = "displayName")]
    pub display_name: String,
    /// 뱃지의 설명입니다.
    #[serde(rename = "displayDescription")]
    pub display_description: String,
    /// 뱃지를 획득한 사용자 수입니다.
    #[serde(rename = "unlockedUserCount")]
    pub unlocked_user_count: i32,
    #[serde(rename = "badgeTier")]
    pub badge_tier: Box<crate::models::BadgeTier>,
    #[serde(rename = "badgeCategory")]
    pub badge_category: Box<crate::models::BadgeCategory>,
    /// solved.ac 회사가 권리를 보유하는지 여부입니다.
    #[serde(rename = "solvedCompanyRights")]
    pub solved_company_rights: bool,
    /// 뱃지가 만들어진 시각입니다.
    #[serde(rename = "createdAt")]
    pub created_at: String,
}

impl Badge {
    /// 사용자가 획득할 수 있는 뱃지입니다.
    pub fn new(badge_id: String, badge_image_url: String, display_name: String, display_description: String, unlocked_user_count: i32, badge_tier: crate::models::BadgeTier, badge_category: crate::models::BadgeCategory, solved_company_rights: bool, created_at: String) -> Badge {
        Badge {
            badge_id,
            badge_image_url,
            display_name,
            display_description,
            unlocked_user_count,
            badge_tier: Box::new(badge_tier),
            badge_category: Box::new(badge_category),
            solved_company_rights,
            created_at,
        }
    }
}


